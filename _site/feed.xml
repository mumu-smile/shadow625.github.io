<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shadow</title>
    <description>stay hungry,stay foolish</description>
    <link>http://shadow625.github.io//</link>
    <atom:link href="http://shadow625.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 30 May 2016 01:10:05 +0800</pubDate>
    <lastBuildDate>Mon, 30 May 2016 01:10:05 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Django static 配置</title>
        <description>&lt;p&gt;今天通过网页实现了一个数据库添加员工并显示出来，现在来总结一下遇到的问题。&lt;/p&gt;

&lt;h3 id=&quot;static&quot;&gt;一 static文件添加&lt;/h3&gt;

&lt;p&gt;以前对于django了解较浅，练习做的网页都是直接将CSS写在HTML文件里面，有不少局限性，真的到实现一个大型网页的时候，这个HTML会变得庞大而不可整理，易读性太差。所以有了需求，就会出来解决方案，django提供static文件机制。通过static机制可以使得模板从服务器的其他（特定）目录寻找CSS、js、image等文件，帮助提升页面的观赏性和功能性。&lt;br /&gt;
  废话不多说，开始介绍这个目录树如图：
&lt;img src=&quot;/image/django_static.png&quot; alt=&quot;picture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以发现在根目录下有一个与你不一样的文件夹——static文件夹，用于放置你的静态文件（CSS JS Image可以看到static下存在对应的三个文件夹），而他们在各个template中被使用，通过相对路径定位到某一静态文件就可以在HTML中添加这一文件。&lt;br /&gt;
要达到这个功能需要进行一些设定，也就是说，告诉django Server 你的static文件夹放在了哪里。&lt;/p&gt;

&lt;h4 id=&quot;settings-static&quot;&gt;1. 在settings 中添加static配置。&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;STATIC_ROOT=os.path.join(BASE_DIR,&#39;static&#39;)#指定静态文件的根目录，即就是你的static文件夹的绝对路径。BASE_DIR 是django项目的路径。  
   STATICFILES_DIRS = (
   ```
   (&quot;css&quot;, os.path.join(STATIC_ROOT,&#39;css&#39;)),
   (&quot;js&quot;, os.path.join(STATIC_ROOT,&#39;js&#39;)),
   (&quot;images&quot;, os.path.join(STATIC_ROOT,&#39;images&#39;)),)#生成相应文件夹的路径，以方便直接读取。
   ```
   STATIC_URL = &#39;/static/&#39; 

   &lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;urlspy-&quot;&gt;2. 在urls.py 文件中设置。&lt;/h4&gt;
&lt;p&gt;－ 需要在url_patterns中添加多余一项&lt;br /&gt;
   － 必须先引入settings 上下文，否则会报错。&lt;br /&gt;
   － url(r’^static/(?P&lt;path&gt;.*)$&#39;, &#39;django.views.static.serve&#39;,{ &#39;document_root&#39;:settings.STATIC_ROOT }),&lt;/path&gt;&lt;/p&gt;

&lt;h4 id=&quot;template&quot;&gt;3. 在template中引用外部静态文件。&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;HTML&quot;&gt;link rel=&quot;stylesheet&quot; href=&quot;../static/css/slider.css&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这基本就是所有需要的设置了。&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

</description>
        <pubDate>Thu, 26 May 2016 20:32:18 +0800</pubDate>
        <link>http://shadow625.github.io//django/2016/05/26/django-static/</link>
        <guid isPermaLink="true">http://shadow625.github.io//django/2016/05/26/django-static/</guid>
        
        <category>thumbnails</category>
        
        <category>shadow grand</category>
        
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>SDN 特战队-target</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;知识清单&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;(&lt;strong&gt;重点难点&lt;/strong&gt;) ryu 北向接口（rest API ）&lt;a href=&quot;http://ryu.readthedocs.io/en/latest/ryu_app_api.html#ryu-application-programming-model&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;(&lt;strong&gt;进行中&lt;/strong&gt;) web(准备一个简单的web程序，提供记录IP功能)&lt;/li&gt;
  &lt;li&gt;(&lt;strong&gt;完成&lt;/strong&gt;）GUI 提供拓扑结构展示功能 学习如何使用&lt;a href=&quot;http://sdnhub.org/releases/sdn-starter-kit-ryu/&quot;&gt;ryu starter -kit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;当前进度&lt;/h3&gt;

&lt;h4 id=&quot;mininet&quot;&gt;1. 对于mininet的操作。&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;与远程ryu控制器连接&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mn --controller remote&lt;/code&gt;&lt;br /&gt;
  &lt;code class=&quot;highlighter-rouge&quot;&gt;ryu-manager {app-list}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;实现mininet的正确操作，
  &lt;img src=&quot;/image/mininet/mininet.png&quot; alt=&quot;picture&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;自定义拓扑结构，
  在mininet文件夹下有一个custom文件夹（并没有强制规定，只要在命令中指定到文件路径即可）默认存放自定义的topo结构等。
  &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mn --controller remote --custom ./custom/(topo.*).py topo=mytopo&lt;/code&gt;
  如下是在~/mininet/custom/topo-2h-2s.py 路径下的文件内容，中间我做了修改添加了一个host-h3
  &lt;img src=&quot;/image/mininet/custom.png&quot; alt=&quot;picture&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ryuapi&quot;&gt;2. ryu北向API的使用。&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;查看ryu文件下的&lt;code class=&quot;highlighter-rouge&quot;&gt;ryu/app/ofctl_rest.py&lt;/code&gt;文件，其详细介绍了ryu北向API的使用，并通过代码定义了openflow 协议。希望大家能仔细看一下注释内容（关于北向API的使用介绍）。流表查看、下发等问题。&lt;/li&gt;
  &lt;li&gt;ryuAPP的编写，实现简单的web应用（涉及到CGI脚本的理解到Python wsgi）
大家可以看一下这个文章&lt;a href=&quot;http://www.muzixing.com/pages/2015/05/13/ryuzhong-wsgixue-xi-bi-ji-yu-restapikai-fa.html&quot;&gt;关于wigi 简单网站&lt;/a&gt;
具体与ryuAPP的切合还没有掌握好，希望有人能做一下。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 21 May 2016 20:32:18 +0800</pubDate>
        <link>http://shadow625.github.io//sdn/2016/05/21/target/</link>
        <guid isPermaLink="true">http://shadow625.github.io//sdn/2016/05/21/target/</guid>
        
        <category>SDN</category>
        
        <category>ryu mininet</category>
        
        <category>team</category>
        
        
        <category>SDN</category>
        
      </item>
    
      <item>
        <title>mininet topo.py 分析</title>
        <description>
</description>
        <pubDate>Tue, 17 May 2016 20:32:18 +0800</pubDate>
        <link>http://shadow625.github.io//mininet/2016/05/17/mininet-topo/</link>
        <guid isPermaLink="true">http://shadow625.github.io//mininet/2016/05/17/mininet-topo/</guid>
        
        <category>thumbnails</category>
        
        <category>shadow grand</category>
        
        
        <category>mininet</category>
        
      </item>
    
      <item>
        <title>Android进程间通信</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;进程间通信&lt;/h3&gt;
&lt;p&gt;作为Android系统中核心的需求，进程间通信显得尤为重要，今天我们从经典Linux的IPC实现说起，进一步分析Android进程间通信方式。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;进程间通信经典实现&lt;/h3&gt;
&lt;p&gt;1.共享内存：
原理在于可以创建一个公共可访问的内存区域，两个进程通过这个共享的内存区域进行通讯，所谓的通信，就是变量的存取。例比于两个人通过一个邮箱进行接头，A将信息放置在邮箱中，并查看信箱中是否有自己需要的内容，B从信箱中取出A留下的信息，进行自己的活动。&lt;/p&gt;

</description>
        <pubDate>Thu, 05 May 2016 20:32:18 +0800</pubDate>
        <link>http://shadow625.github.io//android/2016/05/05/android-IPC-%E5%B0%8F%E8%AE%B0/</link>
        <guid isPermaLink="true">http://shadow625.github.io//android/2016/05/05/android-IPC-%E5%B0%8F%E8%AE%B0/</guid>
        
        <category>thumbnails</category>
        
        <category>shadow grand</category>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Android项目-UML图试画</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;需求分析：&lt;/h3&gt;
&lt;p&gt;需求就是对期望的行为的表达。需求处理的是对象或实体，他们可能处于的状态，以及用于改变状态或对象特征性的功能。 需求是制定客户需要什么行为，而不是如何实现这些行为。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1. 需求类型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;功能需求&lt;/li&gt;
  &lt;li&gt;设计约束&lt;/li&gt;
  &lt;li&gt;过程约束&lt;/li&gt;
  &lt;li&gt;质量需求&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2. 两种需求文档&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 需求定义
- 需求规格说明
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;3. 需求的特性&lt;/h3&gt;

&lt;p&gt;下列列出应该检查的特性&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 正确性
2. 一致性
3. 无二义性
4. 完备性
5. 可行性
6. 需求之间是相关的
7. 可测试性
8. 可跟踪性  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;4.建模表示法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;实体-联系图&lt;/strong&gt;（&lt;em&gt;ER图&lt;/em&gt;）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UML类图&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;事件踪迹：&lt;/strong&gt;  关于现实世界实体之间交换的事件序列的图形描述。每一条竖线表示不同实体的时间线，其名字出现在线的顶部，每一条水平线表示两个实体之间的一个事件或交互，通常理解维从一个实体到另一个实体的消息传递。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;消息时序图：&lt;/strong&gt; 为扩充的事件踪迹表示法。具有创建和撤销实体、制定动作和记事其，以及组合事件踪迹的能力&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;状态机：&lt;/strong&gt; 用于在耽搁模型中表示一组事件踪迹、是一种图形描述，描述了系统与其环境之间的所有对话。 每一个节点称为状态，表示存在与事件发生之间的一个稳定的条件集合。每一个边成为转移，表示有一个时间的发生而产生的行为或条件的变化。每一个转移都标记有触发事件。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UML状态图：&lt;/strong&gt; 用于描述UML类中对象的动态行为。UML类图根据涉及的实体以及实体之间的关系，刻画出了一个问题的静态的、总体的试图。状态图说明的是，一个类的实例应该如何改变其状态。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;petri网：&lt;/strong&gt; 状态-转移表示法的一种形式，用于建模并发活动以及他们之间的交互。petri网中的源泉成为位置，表示活动或条件，条表示变迁。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据流图（DFD）：&lt;/strong&gt; 建模功能以及从一个功能到另一个功能的数据流。一个泡泡表示一个加工户或功能，他转换数据。剪头表示数据流，其中进入泡泡的箭头表示其功能的输入，从泡泡出去的箭头表示其功能的输出。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;用例图：&lt;/strong&gt; 根据系统和系统之间的交互，描述可观察到的、用户发起的功能。打的方框表示系统的边界，方框歪的小人描绘的是擦浴着，包括人或系统，内部的椭圆是用例，表示必须的主要功能极其变种，&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;函数和关系：&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;判定表：&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Parnas表&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;逻辑&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对象约束语言：&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Z&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;代数规格说明：&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;SDL数据&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是我近期的一个Android项目的一个uml图试画。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/UML/use_case_uml.png&quot; alt=&quot;用例图&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/image/UML/seq_uml.png&quot; alt=&quot;时序图&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
	public static void main(String[] args){
	System.out.println(&quot;hha&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 02 May 2016 20:32:18 +0800</pubDate>
        <link>http://shadow625.github.io//uml/2016/05/02/UML-%E5%88%9D%E6%8E%A2/</link>
        <guid isPermaLink="true">http://shadow625.github.io//uml/2016/05/02/UML-%E5%88%9D%E6%8E%A2/</guid>
        
        <category>thumbnails</category>
        
        <category>shadow grand</category>
        
        
        <category>UML</category>
        
      </item>
    
      <item>
        <title>min stack-java</title>
        <description>&lt;h3 id=&quot;x00&quot;&gt;0X00:问题描述&lt;/h3&gt;
&lt;p&gt;  Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
it’s an algorithm problem from the leetcode 155.&lt;/p&gt;

&lt;h3 id=&quot;x01minstack-br&quot;&gt;0X01:minstack &lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;  使用链表实现栈结构&lt;br /&gt;
  可以为每一个元素设置一个额外属性 &lt;strong&gt;min&lt;/strong&gt;，每当进行一次压栈操作时，将压入的元素值与当前栈顶元素的min属性比较，求取最小的座位当前元素的min属性值&lt;br /&gt;
这样可以保证每次需要知道当前栈内最小元素的时候只需一次就可以求解得到，实现难度也较低&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;x02&quot;&gt;0X02:具体结构分析&lt;/h3&gt;
&lt;p&gt;  首先在栈对象初始化时 创建一个entry对象 head 作为栈的第一个元素 也是栈的结束标志当entry的next为空时说明栈已到底&lt;br /&gt;		
&lt;strong&gt;1.push：&lt;/strong&gt;
输入一个元素x 使用entry（int x，entry next）构造一个entry对象 将x输入为她的num,next输入为她的next.&lt;br /&gt;
  剩下一个min,最小值的比较与存储,由于我们的数据结构的特殊性，所以只需要比较栈顶第二个元素的min和当前元素（即栈顶元素）的num取较小的即可。&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;2.pop ：&lt;/strong&gt;
希望弹出一个元素，则可以直接将当前的head变成head.next 当栈为空时则弹出0&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;3.getmin ：&lt;/strong&gt;
到了这个问题的核心了，这也是这个数据结构设计的原因所在，得到当前的最小值，即直接输出head.min。&lt;/p&gt;

&lt;h3 id=&quot;x03&quot;&gt;0x03:代码实现&lt;/h3&gt;
&lt;p&gt;哇咔咔 这里贴上我的JAVA代码实现，不知道为什么，速度要比C/C++ 快很多，大神知道的留个言，多谢指导.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class minstack {
	private entry head;
	public minstack() {
		// TODO Auto-generated constructor stub
		head=new entry();
	}
	public void push(int x) {
        head=new entry(x,head);
    }//压入一个x入栈。

    public void pop() {
    	if (head.next!=null) {
    		head=head.next;	
		}
    }

    public int top() {
    	 if (head.next!=null) {
         	return head.num;
 		}
         return 0;
    }

    public int getMin() {
        if (head.next!=null) {
        	return head.min;
		}
        return 0;
    }
	class entry {//每个栈元素的类，具有3个属性 ：min最小值、num栈元素所存的数值、next 栈顶第二个元素的对象索引。
		private int min; 
 		private int num=-1;
		public entry next=null;

		public entry(int num,entry next){
			this.next=next;
			this.num=num;	
			if(next.next!=null&amp;amp;&amp;amp;next.min&amp;lt;=num){//将两个if 压缩为一个，进行min的赋值
				this.min=next.min;
			}
			else{
				this.min=num;
			}
		}
		public entry(){}
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 19 Apr 2016 20:32:18 +0800</pubDate>
        <link>http://shadow625.github.io//django/2016/04/19/minStack/</link>
        <guid isPermaLink="true">http://shadow625.github.io//django/2016/04/19/minStack/</guid>
        
        <category>leetcode</category>
        
        <category>shadow grand</category>
        
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>jekyll——安装过程及界面定制</title>
        <description>&lt;p&gt;用jekyll好久了（好吧一直是通过github-page简介用的）今天终于在自己的电脑上搭好了Jekyll的本地环境（你问我装了多长时间： 6个月你信不信）在这里记录下Jekyll的搭建和使用的一些经验吧
首先我是在github—pages 上第一次接触Jekyll 
当时正想搭建一个博客平台，但是感觉wordpress太low（应该就是了解不深导致印象不好吧），自己写前段改代码又太菜，这时实验室同桌在搞的一个博客界面吸引了我的眼球，界面很清新，功能不多不少，正是我脑海中完美的一个博客环境，（对，没错 我就是那个时候才知道有github-pages这个东西）而且有很多漂亮的开源模板可以使用（不信是吧，来看看&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;&lt;em&gt;Jekyll主题&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;安装Jekyll&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;github主页就是通过Jekyll渲染的，也就是说在他的后台肯定是配备了一个Jekyll环境，我们现在就是试图在本地搭建一个一模一样的环境，用于本地测试。当然你要是一片markdown错误率能保持在0以下，那么这环境就是多余的了。（想想应该不可能呢，因为你还有耐心在看这篇文，说明我们俩水平差不多吧）
根据&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;&lt;em&gt;Jekyll官网&lt;/em&gt;&lt;/a&gt;给的简单的示例。
    &lt;pre&gt;&lt;code&gt;  $ gem install jekyll
  $ jekyll new my-awesome-site
  $ cd my-awesome-site
  $ jekyll serve&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;然而事实并没有那么简单在我执行第一步的时候就卡住了，发现Mac是自带Ruby的，我就直接输入命令泡好茶等结果，然后发现他一直执行不出来，然后就开始查（此处省略好多字）
&lt;img src=&quot;/image/gem_no_response.png&quot; alt=&quot;no_response&quot; /&gt;
最后知道，需要执行&lt;code class=&quot;highlighter-rouge&quot;&gt;gem update --system &lt;/code&gt;（什么鬼，感觉就像yum的更新源吧）然后执行Jekyll安装就顺利了。（还是没有反应的话借个梯子试试）
后面的事情就很轻松了，如果这个时候你在上面选好了你的界面模板，那就git clone过来，在模板根目录下直接&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll serve&lt;/code&gt;就可以在本地访问你的准博客界面了。
##界面定制
这个我并不是前端专家，但是模板都有了，做一些改动的话还是很轻松的嘛。
如果你有过django开发经历处理这个就太简单了。他们两个之间的差异很小，上手很容易。现在来介绍一下他的目录结构&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code calss=&quot;html&quot;&gt;.
    |── _config.yml
    |── _drafts
    |   |── begin-with-the-crazy-ideas.textile
    |   |── on-simplicity-in-technology.markdown
    |── _includes
    |   |── footer.html
    |   |── header.html
    |── _layouts
    |   |── default.html
    |   |── post.html
    |── _posts
    |   |── 2007-10-29-why-every-programmer-should-play-nethack.textile
    |   |── 2009-04-26-barcamp-boston-4-roundup.textile
    |── _site
    |── .jekyll-metadata
    |── index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section&quot;&gt;目录分析&lt;/h3&gt;

&lt;p&gt;​	根目录下有一个_config.yml 文件 用于存储你的页面的渲染设置，或者你的一些将在全站用到的一些信息条目，例如你的名字，个人网址，以及markdown类型。&lt;/p&gt;

&lt;p&gt;​	然后是_includes 类似于django的模板嵌套，Jekyll支持多个模块拼凑出一个完整的页面，例如在例子中出现的footer.html 将作为页面的最下面的一部分出现，他对于页面的贡献由你决定，为了方便管理与查找，每个人都会养成一个自己的习惯，在header中存放script、CSS等文件引用，footer中存放一些页面内的js脚本。可以抽象的理解为 _include 中的文件都是一个个装饰模块，而外部的index.html就是一个房子的框架，将一个个装饰模块填充在房子的框架上，就能盖成一个完美的房子。&lt;/p&gt;

&lt;p&gt;​	而处于_layout 下的文件顾名思义为布局文件，你希望你的不同类的页面能通过不同的界面显示，而这就由布局文件决定的，通过定义不同的布局文件可以实现上述目的。&lt;/p&gt;

&lt;p&gt;​	下一个post文件夹 就是这个站的主体，你的文章所在的位置了。每一篇文章由markdown书写，Jekyll自带···markdown解释器。&lt;/p&gt;

&lt;p&gt;​	这就是整个目录树比较重要的几个部分了。&lt;/p&gt;

</description>
        <pubDate>Fri, 15 Apr 2016 20:12:12 +0800</pubDate>
        <link>http://shadow625.github.io//2016/04/15/jekyll-start/</link>
        <guid isPermaLink="true">http://shadow625.github.io//2016/04/15/jekyll-start/</guid>
        
        
      </item>
    
      <item>
        <title>android安全狗-SDK分析</title>
        <description>&lt;h1 id=&quot;androidsdk-&quot;&gt;android第三方SDK 分析初探&lt;/h1&gt;

&lt;p&gt;近期在学习Android 第三方SDK安全，希望通过分析具体程序得出该SDK的安全问题（比如与服务器之间的不安全通信，对于本机信息的非法获取等等），这样的问题往往影响面较大，涉及用户较多。
主要分析方案可以总结为两种方向:
 * 通过使用该SDK的apk入手，根据官方提供的Demo 检查安全问题。
 * 根据官方提供的SDK以及文档查看是否存在问题。
首先 我们来介绍一下第一种方案： 一般的第三方SDK提供方为了更好的展示功能都会写一个Demo apk 希望能想开发者提供更加良好的服务，这也正好给我们更加良好的分析环境，这类apk主要围绕SDK功能展开没有其他功能，正好是我们需要的。
我们可以通过该apk进行静动结合和分析手法.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;静态分析&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;apk解包  如果只需要里面的manifest文件  可以直接通过更改文件后缀为rar zip 解压就能得到&lt;/li&gt;
  &lt;li&gt;反编译  现在有许多流行的apk分析工具能够做到，其中较为突出的就是smali和baksmali（一个编译一个反编译），其他很多都是基于他们做的例如apktools ，总之通过工具将apk或者dex反编译得到smali，这一步就可以做很多有意思的事情，比如可以通过grep 查找像URL等信息，可以让我们更好的理解app与服务器之间的通信信息，&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -Eir “https?://“ XX(dir)/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;通过手动的方法获取信息 一开始还是很有意思的，但是马上你就会厌烦，因为这样看到的信息太杂太多，于是你在想是不是有一个工具能帮你把信息归好类，最好存在一个数据结构中方便查取，于是我们有了androguard  一个神奇的工具，这是一个基于Python做的Android静态分析集成工具，他的强大超过你的想象，不信的话可以去试试。我们这里需要的是androlyze.py 他提供了一个ipython shell。通过他你可以知道这个APP都申请了哪些权限，和这些权限在哪里使用了，即就是在哪里调用的方法。还有很多，我们这里主要想知道这些。&lt;/li&gt;
  &lt;li&gt;通过这些使用的权限，我们检查该APP是否存在安全问题，比如在他使用了网络的位置，查看其与服务器之间的交互方式，对于敏感信息是否进行了加密，是否有证书验证错误处理，在不同网络上的安全传输方式是否一致等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;动态分析暂时还没做完 就先不写了。&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2016 20:12:12 +0800</pubDate>
        <link>http://shadow625.github.io//2016/04/05/android-sdksecurity/</link>
        <guid isPermaLink="true">http://shadow625.github.io//2016/04/05/android-sdksecurity/</guid>
        
        
      </item>
    
      <item>
        <title>network-arp欺骗</title>
        <description>&lt;p&gt;如果你有个路由器，你能做什么。
     家用路由器现在几乎是每个人家中必不可少的一个设备，也是让智能手机用户非常感动的一个设备（流量不用钱了），但是在享受这些网络设备带给我们便捷的同时，网路安全也同时在影响着你，&lt;code class=&quot;highlighter-rouge&quot;&gt;处在互联网合适位置的人，能够产生巨大的影响力&lt;/code&gt;，这是一个非常严肃的话题。（好吧，扯远了）
     今天希望介绍一下ARP 欺骗使得抓取路由器所承载用户的数据包（Android分析用到的，在这里整理一下，分享出来）
     首先我们需要来介绍一下ARP协议，
          &amp;gt; 全名为address resolution protocol
          是用于进行地址解析，在一个交换网络中，希望通过局域网交换机发送数据给另一个终端，我们需要该终端的物理地址以及逻辑地址，但是加入现在你只知道IP地址而没有Mac地址，怎么办。我们是不是可以设想两种解决方法，&lt;/p&gt;

&lt;p&gt;1.在每个网络设备中存一张表，每个局域网中的IP Mac 都记录下来，然后不再变化。到时候想发给谁直接查找表，然后寻找，发送。done····结果 这中间存在问题，IP地址属于一个设备在互联网中的一个逻辑地址，而Mac 地址（物理地址）他是固化在网卡上的，所以 可想而知，这个IP Mac 组合是一个会变化的事件，一旦加入新的网络设备，或者某个网络设备离开，然后回来，都会使得这个表无能为力。所以，前人使用了一个动态的方法做这个事情。&lt;/p&gt;

&lt;p&gt;2.每个设备都维护着一张表，记录了IP Mac组合，感觉是不是和上一个差不多，区别在后面，这是个可以变化的表，每当需要向某个设备发送信息时（包括路由器，后面会介绍相关的安全问题）会寻找这个表格，而当表中没有该元素时，这个时候他就会急了，他需要知道这个IP地址所对应的物理地址是多少啊，不然他没法发送啊，所以他就大声喊叫（发送广播消息）询问该局域网中谁具有该IP地址，所有人都会收到这个消息，然后和自己的IP比对，发现是在问自己，他就会在发送一个回信给那个发送设备，并附上自己的IP地址和Mac地址，就是告诉他 你发到这里来吧。否则丢弃该消息。然后设备会在一定时间后刷新一次这个表，即就是更新一次表的内容。 以上就是描述了一个ARP协议工作流程，翻译为术语则是 A设备希望给B设备发送消息，但是只有B的IP地址，则A会寻找自己的ARP表中B的信息，如果没有就会通过ARP协议获得，并填入ARP表，首先A发送一个ARP广播（通过路由器），向局域网内所有设备询问谁具有该IP地址，每个人收到该消息后，会检查自己的IP和消息中需要的IP是否一致， 如果不一致则丢弃。假如B收到，发现是询问自己的IP的，那么他就会向A发送一个ARP回复消息，这条消息以单播形式发送，告诉A自己的IP地址和Mac地址，然后结束。&lt;/p&gt;

&lt;p&gt;3.然而当时网络协议的设计都认为每个人都是善良纯洁的，都是无害的上网（大量事实表明······），导致该协议极不安全，·处于网络合适位置的恶意上网者，能够产生很恶劣的后果。·如果一个恶意的第三方C，收到了不是指向自己的ARP消息（因为是广播，所有交换域内的人都会收到）没有丢弃而是解读然后发送回信，告诉A 你想要B的Mac地址是吧，他的地址是（C的Mac）则就会产生消息误发。假如C收到了以后帮你转发给B（可能叫包内容改写）则会引发中间人攻击，假如不转发，则称为消息劫持。（同称ARP欺骗）&lt;/p&gt;

&lt;p&gt;我们现在希望抓到Android的数据包，那么可以通过这种方法欺骗Android设备，将我们的设备作为网关，消息通过我们转发给网关。则就可以抓去Android的数据了。&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Apr 2016 20:12:12 +0800</pubDate>
        <link>http://shadow625.github.io//2016/04/03/network-arpspoofing/</link>
        <guid isPermaLink="true">http://shadow625.github.io//2016/04/03/network-arpspoofing/</guid>
        
        
      </item>
    
      <item>
        <title>git游记</title>
        <description>&lt;p&gt;#0x00
 今天刚换的主题，本想着花两个小时把之前没写好的django补一下，结果发现git一直有问题（问题在于我），于是就弱弱的打开了chrome，进行git补习
 ，看了很多篇文章，从很多个碎片整合出来一个结果，以前理解的git 都不对。
#0x01
 现在来说一下我对git的大体理解（极其片面，勿喷）。git 一个版本控制工具，能让你或者你的团队能一起受到制约的共同开发，而github只是一个远程的服务器，
 进行版本托管的工具。我们需要进行的主要操作就是从远程服务器（即你的github仓库）获取（&lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt;）代码，或者你把你更改过的代码上传（&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;）到服务器（或者同一个团队的成员）
 中间会有一些辅助操作
1.在本地建立控制空间（&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;）（新建一个本地仓库，存储下载下来的远程代码）
2.将你的想要更改的加入到git的一个数据结构中（&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt;），等待确认提交。
3.确认提交更改（&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;）只是代码还是在本地，知道执行了push命令。&lt;/p&gt;

&lt;p&gt;现在从头开始一次项目。
  &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt; 
  &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin git@github.com:shadow625/shadow625.github.io.git&lt;/code&gt;这里就相当于一次赋值过程，将这个远程的github地址赋给origin ，以后origin就代表这个地址，是我们取
  同步代码等的键击量减少了很多。
  &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone origin master&lt;/code&gt;这意味着将origin代表的远程仓库的master分支的代码克隆到当前工作目录下。
  &lt;code class=&quot;highlighter-rouge&quot;&gt;git add A|./&lt;/code&gt; 当你更改代码并在本地进行了测试后 就应该执行这一条指令了，现在还不懂原理，应该是git会把这些可能会被更改的文件存入一个数据结构，或者文件。然后当你确认提交后，就会将这些更改应用到远端&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m “something you wanna say to remind you incase”&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -a&lt;/code&gt;将所有全部提交
  &lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt; 我遇到的问题就是在这里 由于之前不知道，我就直接使用了git push，然后他就直接将代码同步到他的默认分支：gh-pages
但是github的博客文件是从master分支下读取的，所以导致我的更改一直没有效。当时都快看疯了，
  完成了 这就是我的体会了。&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 08:04:10 +0800</pubDate>
        <link>http://shadow625.github.io//2015/12/19/git-log/</link>
        <guid isPermaLink="true">http://shadow625.github.io//2015/12/19/git-log/</guid>
        
        
      </item>
    
  </channel>
</rss>
